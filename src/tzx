#!/usr/bin/env node
/*
The MIT License (MIT)

Copyright (c) 2015 Kevin Phillips (kmp1)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

var fs = require('fs');
var constants = require('constants');
var wav_js = require("/Users/kevin/Projects/wav.js/master/src/wav.js");
var tzx_js = require("/Users/kevin/Projects/tzx.js/master/src/tzx.js");
var program = require('commander');
var path = require('path');
var pkg = require(path.join(__dirname, '../package.json'));

program
	.usage("[options] <file>")
    .version(pkg.version)
    .option('-o, --out <path>', 'Path to an output file (if not specified, a file in the same location with the same name ending with .wav will be created)')
    .option('-t, --type <1|2>', 'The type 1 is TZX and 2 is TAP - if not specified the file extension is used', parseInt)
    .parse(process.argv);

var input = program.args[0];

if (input === undefined) {
	console.log("No input file specified");
	return;
}

if (!fs.existsSync(input)) {
	console.log("Could not find the input file specified");
	return;
}

var output;
if (program.out == undefined) {
	output = input + ".wav";
} else {
	output = program.out;
}

var typeSpecified = false;
var isTzx;

if (program.type !== undefined) {
	if (program.type === 1) {
		isTzx = true;
		typeSpecified = true;
	} else if (program.type === 2) {
		isTzx = false;
		typeSpecified = true;
	} else {
		console.log("Invalid type '" + program.type + "' ignored the argument.");
	}
}

if (!typeSpecified) {

	var dot = input.lastIndexOf('.');
	if (dot === -1) {
		console.log("No extension on the input file and no expclit -t argument passed so assuming TZX");
		isTzx = true;
	} else {
		var extension = input.substr(dot + 1).trim().toLowerCase();
		if (extension === 'tap') {
			isTzx = false;
		} else if (extension === 'tap') {
			isTzx = true;
		} else {
			console.log("Unrecognised extension on the input file and no expclit -t argument passed so assuming TZX");
			isTzx = true;
		}
	}
}

console.log("Converting " + input + " to " + output + " (as a " + (isTzx ? "tzx" : "tap") + " file)...");

var file = fs.readFileSync(input);
var wave = wav_js.create(1, 44100, wav_js.BitSize.EIGHT);

var details;
if (isTzx) {
	details = tzx_js.convertTzxToAudio(tzx_js.MachineSettings.ZXSpectrum48, file, wave);
} else {
	details = tzx_js.convertTapToAudio(tzx_js.MachineSettings.ZXSpectrum48, file, wave);
}

fs.writeFileSync(output, new Buffer(wave.toByteArray()));

console.log("Conversion SUCCESSFUL!");

if (details.majorVersion !== undefined) {
	console.log("ZXTape file revision " + details.majorVersion + "." + details.minorVersion);
}

console.log("Number of Blocks: " + details.blocks.length);

for (var x = 1; x < details.blocks.length + 1; x += 1) {
    var block = details.blocks[x - 1];
    var logOutput = "";

    if (block.blockType === 0x10 || block.blockType === 0x11) {

        var headerText = "";

        if (block.programType !== undefined) {
	        if (block.programType === 0) {
	            headerText = "Program: " + block.headerText;
	        } else if (block.programType === 1) {
	            headerText = "Num. Array: " + block.headerText;
	        } else if (block.programType === 2) {
	            headerText = "Char. Array : " + block.headerText;
	        } else {
	            headerText = "Bytes: " + block.headerText;
	        }
    	}

    	var checkSum = "";
    	if (block.checkSum !== undefined) {
    		checkSum = "\nCheckSum: " + block.checkSum + " (0x" + block.checkSum.toString(16) + ") - "
    			+ (block.validCheckSum ? "OK" : "INVALID");
    	}

    	var typeLabel;
    	if (block.blockType === 0x10) {
    		typeLabel = "10 - Standard Loading Data -";
    	} else {
			typeLabel = "11 - Turbo Loading Data -";
    	}

        logOutput = "(" + block.offset.toString(16) + "):  " + typeLabel + " " + headerText + "\nLength: "
            + block.blockLength + " bytes \nFlag: " + block.flag + "(0x" + block.flag.toString(16) + ")" + checkSum
            + "\nPause after block: " + block.pause + " milliseconds";
    } else if (block.blockType === 0x32) {

    	logOutput = "(" + block.offset.toString(16) + "):  32 - Archive Info: ";
    	for (var y = 0; y < block.archiveInfo.length; y += 1) {
    		logOutput += block.archiveInfo[y].type + ": " + block.archiveInfo[y].info + "\n";
    	}

    } else if (block.blockType === 0x30) {

        logOutput = "(" + block.offset.toString(16) + "):  30 - Description: " + block.tapeDescription;
    }

    console.log("Block " + x + " " + logOutput);
}
